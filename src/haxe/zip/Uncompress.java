// Generated by Haxe 4.0.5
package haxe.zip;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Uncompress extends haxe.lang.HxObject
{
	public Uncompress(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Uncompress(java.lang.Object windowBits)
	{
		//line 30 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
		haxe.zip.Uncompress.__hx_ctor_haxe_zip_Uncompress(this, windowBits);
	}
	
	
	protected static void __hx_ctor_haxe_zip_Uncompress(haxe.zip.Uncompress __hx_this, java.lang.Object windowBits)
	{
		//line 31 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
		__hx_this.inflater = new java.util.zip.Inflater(( ( ! (haxe.lang.Runtime.eq(windowBits, null)) ) && ( ((int) (haxe.lang.Runtime.toInt(windowBits)) ) < 0 ) ));
	}
	
	
	public static haxe.io.Bytes run(haxe.io.Bytes src, java.lang.Object bufsize)
	{
		//line 50 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
		try 
		{
			//line 51 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			java.util.zip.Inflater decompresser = new java.util.zip.Inflater();
			//line 52 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			byte[] buf = haxe.io.Bytes.alloc(( (haxe.lang.Runtime.eq(bufsize, null)) ? (src.length) : (((int) (haxe.lang.Runtime.toInt(bufsize)) )) )).b;
			//line 54 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(src.length);
			//line 55 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			decompresser.setInput(((byte[]) (src.b) ), ((int) (0) ), ((int) (src.length) ));
			//line 57 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			while ( ! (decompresser.finished()) )
			{
				//line 58 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
				int count = decompresser.inflate(((byte[]) (buf) ));
				//line 59 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
				out.write(((byte[]) (buf) ), ((int) (0) ), ((int) (count) ));
			}
			
			//line 61 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			out.close();
			//line 62 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			return haxe.io.Bytes.ofData(out.toByteArray());
		}
		catch (java.lang.Throwable typedException)
		{
			//line 50 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			throw haxe.lang.HaxeException.wrap(typedException);
		}
		
		
	}
	
	
	public java.util.zip.Inflater inflater;
	
	public java.lang.Object execute(haxe.io.Bytes src, int srcPos, haxe.io.Bytes dst, int dstPos)
	{
		//line 34 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
		try 
		{
			//line 35 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			this.inflater.setInput(((byte[]) (src.b) ), ((int) (srcPos) ), ((int) (( src.length - srcPos )) ));
			//line 36 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			this.inflater.inflate(((byte[]) (dst.b) ), ((int) (dstPos) ), ((int) (( dst.length - dstPos )) ));
			//line 38 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			boolean tmp = this.inflater.finished();
			//line 39 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			long x = this.inflater.getBytesRead();
			//line 39 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (( ((long) (x) ) < -2147483648 )) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (( ((long) (x) ) > 2147483647 )) )) )) 
			{
				//line 39 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
				throw haxe.lang.HaxeException.wrap("Overflow");
			}
			
			//line 40 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			long x1 = this.inflater.getBytesWritten();
			//line 40 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			if (( haxe.lang.Runtime.toBool(((java.lang.Boolean) (( ((long) (x1) ) < -2147483648 )) )) || haxe.lang.Runtime.toBool(((java.lang.Boolean) (( ((long) (x1) ) > 2147483647 )) )) )) 
			{
				//line 40 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
				throw haxe.lang.HaxeException.wrap("Overflow");
			}
			
			//line 37 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			return new haxe.lang.DynamicObject(new java.lang.String[]{"done"}, new java.lang.Object[]{tmp}, new java.lang.String[]{"read", "write"}, new double[]{((double) (((double) (((int) (((long) (x) )) )) )) ), ((double) (((double) (((int) (((long) (x1) )) )) )) )});
		}
		catch (java.lang.Throwable typedException)
		{
			//line 34 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			throw haxe.lang.HaxeException.wrap(typedException);
		}
		
		
	}
	
	
	public void setFlushMode(haxe.zip.FlushMode f)
	{
	}
	
	
	public void close()
	{
		//line 47 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
		this.inflater.end();
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
		{
			//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			boolean __temp_executeDef1 = true;
			//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			if (( field != null )) 
			{
				//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
				switch (field.hashCode())
				{
					case 175566667:
					{
						//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
						if (field.equals("inflater")) 
						{
							//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
							this.inflater = ((java.util.zip.Inflater) (value) );
							//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
							return value;
						}
						
						//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			if (__temp_executeDef1) 
			{
				//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
		{
			//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			boolean __temp_executeDef1 = true;
			//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			if (( field != null )) 
			{
				//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
				switch (field.hashCode())
				{
					case 94756344:
					{
						//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
						if (field.equals("close")) 
						{
							//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "close")) );
						}
						
						//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
						break;
					}
					
					
					case 175566667:
					{
						//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
						if (field.equals("inflater")) 
						{
							//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
							return this.inflater;
						}
						
						//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
						break;
					}
					
					
					case 962132101:
					{
						//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
						if (field.equals("setFlushMode")) 
						{
							//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "setFlushMode")) );
						}
						
						//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
						break;
					}
					
					
					case -1319569547:
					{
						//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
						if (field.equals("execute")) 
						{
							//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "execute")) );
						}
						
						//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			if (__temp_executeDef1) 
			{
				//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, java.lang.Object[] dynargs)
	{
		//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
		{
			//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			boolean __temp_executeDef1 = true;
			//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			if (( field != null )) 
			{
				//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
				switch (field.hashCode())
				{
					case 94756344:
					{
						//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
						if (field.equals("close")) 
						{
							//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
							this.close();
						}
						
						//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
						break;
					}
					
					
					case -1319569547:
					{
						//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
						if (field.equals("execute")) 
						{
							//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
							return this.execute(((haxe.io.Bytes) (dynargs[0]) ), ((int) (haxe.lang.Runtime.toInt(dynargs[1])) ), ((haxe.io.Bytes) (dynargs[2]) ), ((int) (haxe.lang.Runtime.toInt(dynargs[3])) ));
						}
						
						//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
						break;
					}
					
					
					case 962132101:
					{
						//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
						if (field.equals("setFlushMode")) 
						{
							//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
							this.setFlushMode(((haxe.zip.FlushMode) (dynargs[0]) ));
						}
						
						//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
			if (__temp_executeDef1) 
			{
				//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
		baseArr.push("inflater");
		//line 27 "/home/travis/haxe/std/java/_std/haxe/zip/Uncompress.hx"
		super.__hx_getFields(baseArr);
	}
	
	
}


