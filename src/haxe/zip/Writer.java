// Generated by Haxe 4.0.5
package haxe.zip;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Writer extends haxe.lang.HxObject
{
	static
	{
		//line 35 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		haxe.zip.Writer.CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE = 46;
		//line 42 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		haxe.zip.Writer.LOCAL_FILE_HEADER_FIELDS_SIZE = 30;
	}
	
	public Writer(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Writer(haxe.io.Output o)
	{
		//line 55 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		haxe.zip.Writer.__hx_ctor_haxe_zip_Writer(this, o);
	}
	
	
	protected static void __hx_ctor_haxe_zip_Writer(haxe.zip.Writer __hx_this, haxe.io.Output o)
	{
		//line 56 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		__hx_this.o = o;
		//line 57 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		__hx_this.files = new haxe.ds.List<java.lang.Object>();
	}
	
	
	public static int CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE;
	
	public static int LOCAL_FILE_HEADER_FIELDS_SIZE;
	
	public haxe.io.Output o;
	
	public haxe.ds.List<java.lang.Object> files;
	
	public void writeZipDate(haxe.root.Date date)
	{
		//line 61 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		int hour = date.date.get(((int) (java.util.Calendar.HOUR_OF_DAY) ));
		//line 62 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		int min = date.date.get(((int) (java.util.Calendar.MINUTE) ));
		//line 63 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		int sec = ( date.date.get(((int) (java.util.Calendar.SECOND) )) >> 1 );
		//line 64 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		this.o.writeUInt16(( ( ( hour << 11 ) | ( min << 5 ) ) | sec ));
		//line 65 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		int year = ( date.date.get(((int) (java.util.Calendar.YEAR) )) - 1980 );
		//line 66 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		int month = ( date.date.get(((int) (java.util.Calendar.MONTH) )) + 1 );
		//line 67 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		int day = date.date.get(((int) (java.util.Calendar.DAY_OF_MONTH) ));
		//line 68 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		this.o.writeUInt16(( ( ( year << 9 ) | ( month << 5 ) ) | day ));
	}
	
	
	public void writeEntryHeader(java.lang.Object f)
	{
		//line 72 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		haxe.io.Output o = this.o;
		//line 73 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		int flags = 0;
		//line 74 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		if (( ((haxe.ds.List<haxe.zip.ExtraField>) (haxe.lang.Runtime.getField(f, "extraFields", true)) ) != null )) 
		{
			//line 75 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			haxe.ds._List.ListNode<haxe.zip.ExtraField> _g_head = ((haxe.ds.List<haxe.zip.ExtraField>) (haxe.lang.Runtime.getField(f, "extraFields", true)) ).h;
			//line 75 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			while (( _g_head != null ))
			{
				//line 75 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				haxe.zip.ExtraField val = _g_head.item;
				//line 75 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				_g_head = _g_head.next;
				//line 75 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				haxe.zip.ExtraField e = ((haxe.zip.ExtraField) (val) );
				//line 76 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				switch (e.index)
				{
					case 2:
					{
						//line 78 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						flags |= 2048;
						//line 78 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						break;
					}
					
					
					default:
					{
						//line 79 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						break;
					}
					
				}
				
			}
			
		}
		
		//line 82 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		o.writeInt32(67324752);
		//line 83 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		o.writeUInt16(20);
		//line 84 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		o.writeUInt16(flags);
		//line 85 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		if (( ((haxe.io.Bytes) (haxe.lang.Runtime.getField(f, "data", true)) ) == null )) 
		{
			//line 86 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			int __temp_expr10 = ((int) (haxe.lang.Runtime.setField_f(f, "fileSize", ((double) (0) ))) );
			//line 87 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			int __temp_expr11 = ((int) (haxe.lang.Runtime.setField_f(f, "dataSize", ((double) (0) ))) );
			//line 88 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			java.lang.Object __temp_expr12 = ((java.lang.Object) (haxe.lang.Runtime.setField_f(f, "crc32", ((double) (0) ))) );
			//line 89 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			boolean __temp_expr13 = haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.setField(f, "compressed", false)) ));
			//line 90 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			haxe.io.Bytes __temp_expr14 = ((haxe.io.Bytes) (haxe.lang.Runtime.setField(f, "data", haxe.io.Bytes.alloc(0))) );
		}
		else
		{
			//line 92 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			if (haxe.lang.Runtime.eq(haxe.lang.Runtime.getField(f, "crc32", true), null)) 
			{
				//line 93 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				if (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(f, "compressed", true)) ))) 
				{
					//line 94 "/home/travis/haxe/std/haxe/zip/Writer.hx"
					throw haxe.lang.HaxeException.wrap("CRC32 must be processed before compression");
				}
				
				//line 95 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				java.lang.Object __temp_expr7 = ((java.lang.Object) (haxe.lang.Runtime.setField_f(f, "crc32", ((double) (haxe.crypto.Crc32.make(((haxe.io.Bytes) (haxe.lang.Runtime.getField(f, "data", true)) ))) ))) );
			}
			
			//line 97 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			if (( ! (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(f, "compressed", true)) ))) )) 
			{
				//line 98 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				int __temp_expr8 = ((int) (haxe.lang.Runtime.setField_f(f, "fileSize", ((double) (((haxe.io.Bytes) (haxe.lang.Runtime.getField(f, "data", true)) ).length) ))) );
			}
			
			//line 99 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			int __temp_expr9 = ((int) (haxe.lang.Runtime.setField_f(f, "dataSize", ((double) (((haxe.io.Bytes) (haxe.lang.Runtime.getField(f, "data", true)) ).length) ))) );
		}
		
		//line 101 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		o.writeUInt16(( (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(f, "compressed", true)) ))) ? (8) : (0) ));
		//line 102 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		this.writeZipDate(((haxe.root.Date) (haxe.lang.Runtime.getField(f, "fileTime", true)) ));
		//line 103 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		o.writeInt32(((int) (haxe.lang.Runtime.toInt(haxe.lang.Runtime.getField(f, "crc32", true))) ));
		//line 104 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		o.writeInt32(((int) (haxe.lang.Runtime.getField_f(f, "dataSize", true)) ));
		//line 105 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		o.writeInt32(((int) (haxe.lang.Runtime.getField_f(f, "fileSize", true)) ));
		//line 106 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		o.writeUInt16(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f, "fileName", true)).length());
		//line 107 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		haxe.io.BytesOutput e1 = new haxe.io.BytesOutput();
		//line 108 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		if (( ((haxe.ds.List<haxe.zip.ExtraField>) (haxe.lang.Runtime.getField(f, "extraFields", true)) ) != null )) 
		{
			//line 109 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			haxe.ds._List.ListNode<haxe.zip.ExtraField> _g_head1 = ((haxe.ds.List<haxe.zip.ExtraField>) (haxe.lang.Runtime.getField(f, "extraFields", true)) ).h;
			//line 109 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			while (( _g_head1 != null ))
			{
				//line 109 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				haxe.zip.ExtraField val1 = _g_head1.item;
				//line 109 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				_g_head1 = _g_head1.next;
				//line 109 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				haxe.zip.ExtraField f1 = ((haxe.zip.ExtraField) (val1) );
				//line 110 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				switch (f1.index)
				{
					case 0:
					{
						//line 118 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						haxe.io.Bytes bytes = ((haxe.io.Bytes) (f1.params[1]) );
						//line 118 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						int tag = ((int) (haxe.lang.Runtime.toInt(f1.params[0])) );
						//line 118 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						{
							//line 119 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							e1.writeUInt16(tag);
							//line 120 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							e1.writeUInt16(bytes.length);
							//line 121 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							e1.write(bytes);
						}
						
						//line 118 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						break;
					}
					
					
					case 1:
					{
						//line 111 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						int crc = ((int) (haxe.lang.Runtime.toInt(f1.params[1])) );
						//line 111 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						java.lang.String name = haxe.lang.Runtime.toString(f1.params[0]);
						//line 111 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						{
							//line 112 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							haxe.io.Bytes namebytes = haxe.io.Bytes.ofString(name, null);
							//line 113 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							e1.writeUInt16(28789);
							//line 114 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							e1.writeUInt16(( namebytes.length + 5 ));
							//line 115 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							e1.writeByte(1);
							//line 116 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							e1.writeInt32(crc);
							//line 117 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							e1.write(namebytes);
						}
						
						//line 111 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						break;
					}
					
					
					case 2:
					{
						//line 122 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						break;
					}
					
					
				}
				
			}
			
		}
		
		//line 126 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		haxe.io.Bytes ebytes = e1.getBytes();
		//line 127 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		o.writeUInt16(ebytes.length);
		//line 128 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		o.writeString(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f, "fileName", true)), null);
		//line 129 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		o.write(ebytes);
		//line 130 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		java.lang.Object __temp_stmt15 = null;
		//line 130 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		{
			//line 131 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			java.lang.String __temp_odecl1 = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f, "fileName", true));
			//line 132 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			boolean __temp_odecl2 = haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(f, "compressed", true)) ));
			//line 133 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			int __temp_odecl3 = ((haxe.io.Bytes) (haxe.lang.Runtime.getField(f, "data", true)) ).length;
			//line 134 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			int __temp_odecl4 = ((int) (haxe.lang.Runtime.getField_f(f, "fileSize", true)) );
			//line 135 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			java.lang.Object __temp_odecl5 = haxe.lang.Runtime.getField(f, "crc32", true);
			//line 136 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			haxe.root.Date __temp_odecl6 = ((haxe.root.Date) (haxe.lang.Runtime.getField(f, "fileTime", true)) );
			//line 130 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			__temp_stmt15 = new haxe.lang.DynamicObject(new java.lang.String[]{"compressed", "crc", "date", "fields", "name"}, new java.lang.Object[]{__temp_odecl2, __temp_odecl5, __temp_odecl6, ebytes, __temp_odecl1}, new java.lang.String[]{"clen", "size"}, new double[]{((double) (((double) (__temp_odecl3) )) ), ((double) (((double) (__temp_odecl4) )) )});
		}
		
		//line 130 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		this.files.add(__temp_stmt15);
	}
	
	
	public void write(haxe.ds.List<java.lang.Object> files)
	{
		//line 142 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		{
			//line 142 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			haxe.ds._List.ListNode<java.lang.Object> _g_head = files.h;
			//line 142 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			while (( _g_head != null ))
			{
				//line 142 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				java.lang.Object val = _g_head.item;
				//line 142 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				_g_head = _g_head.next;
				//line 142 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				java.lang.Object f = ((java.lang.Object) (val) );
				//line 143 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.writeEntryHeader(f);
				//line 144 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.o.writeFullBytes(((haxe.io.Bytes) (haxe.lang.Runtime.getField(f, "data", true)) ), 0, ((haxe.io.Bytes) (haxe.lang.Runtime.getField(f, "data", true)) ).length);
			}
			
		}
		
		//line 146 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		this.writeCDR();
	}
	
	
	public void writeCDR()
	{
		//line 150 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		int cdr_size = 0;
		//line 151 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		int cdr_offset = 0;
		//line 152 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		{
			//line 152 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			haxe.ds._List.ListNode<java.lang.Object> _g_head = this.files.h;
			//line 152 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			while (( _g_head != null ))
			{
				//line 152 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				java.lang.Object val = _g_head.item;
				//line 152 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				_g_head = _g_head.next;
				//line 152 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				java.lang.Object f = ((java.lang.Object) (val) );
				//line 153 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				int namelen = haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f, "name", true)).length();
				//line 154 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				int extraFieldsLength = ((haxe.io.Bytes) (haxe.lang.Runtime.getField(f, "fields", true)) ).length;
				//line 155 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.o.writeInt32(33639248);
				//line 156 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.o.writeUInt16(20);
				//line 157 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.o.writeUInt16(20);
				//line 158 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.o.writeUInt16(0);
				//line 159 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.o.writeUInt16(( (haxe.lang.Runtime.toBool(((java.lang.Boolean) (haxe.lang.Runtime.getField(f, "compressed", true)) ))) ? (8) : (0) ));
				//line 160 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.writeZipDate(((haxe.root.Date) (haxe.lang.Runtime.getField(f, "date", true)) ));
				//line 161 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.o.writeInt32(((int) (haxe.lang.Runtime.getField_f(f, "crc", true)) ));
				//line 162 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.o.writeInt32(((int) (haxe.lang.Runtime.getField_f(f, "clen", true)) ));
				//line 163 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.o.writeInt32(((int) (haxe.lang.Runtime.getField_f(f, "size", true)) ));
				//line 164 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.o.writeUInt16(namelen);
				//line 165 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.o.writeUInt16(extraFieldsLength);
				//line 166 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.o.writeUInt16(0);
				//line 167 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.o.writeUInt16(0);
				//line 168 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.o.writeUInt16(0);
				//line 169 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.o.writeInt32(0);
				//line 170 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.o.writeInt32(cdr_offset);
				//line 171 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.o.writeString(haxe.lang.Runtime.toString(haxe.lang.Runtime.getField(f, "name", true)), null);
				//line 172 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				this.o.write(((haxe.io.Bytes) (haxe.lang.Runtime.getField(f, "fields", true)) ));
				//line 173 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				cdr_size += ( ( 46 + namelen ) + extraFieldsLength );
				//line 174 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				cdr_offset += ( ( ( 30 + namelen ) + extraFieldsLength ) + ((int) (haxe.lang.Runtime.getField_f(f, "clen", true)) ) );
			}
			
		}
		
		//line 177 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		this.o.writeInt32(101010256);
		//line 179 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		this.o.writeUInt16(0);
		//line 181 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		this.o.writeUInt16(0);
		//line 183 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		this.o.writeUInt16(this.files.length);
		//line 185 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		this.o.writeUInt16(this.files.length);
		//line 187 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		this.o.writeInt32(cdr_size);
		//line 189 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		this.o.writeInt32(cdr_offset);
		//line 191 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		this.o.writeUInt16(0);
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		{
			//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			boolean __temp_executeDef1 = true;
			//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			if (( field != null )) 
			{
				//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				switch (field.hashCode())
				{
					case 97434231:
					{
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						if (field.equals("files")) 
						{
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							this.files = ((haxe.ds.List<java.lang.Object>) (value) );
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							return value;
						}
						
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						break;
					}
					
					
					case 111:
					{
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						if (field.equals("o")) 
						{
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							this.o = ((haxe.io.Output) (value) );
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							return value;
						}
						
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			if (__temp_executeDef1) 
			{
				//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		{
			//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			boolean __temp_executeDef1 = true;
			//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			if (( field != null )) 
			{
				//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				switch (field.hashCode())
				{
					case -1846498350:
					{
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						if (field.equals("writeCDR")) 
						{
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "writeCDR")) );
						}
						
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						break;
					}
					
					
					case 111:
					{
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						if (field.equals("o")) 
						{
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							return this.o;
						}
						
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						break;
					}
					
					
					case 113399775:
					{
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						if (field.equals("write")) 
						{
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "write")) );
						}
						
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						break;
					}
					
					
					case 97434231:
					{
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						if (field.equals("files")) 
						{
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							return this.files;
						}
						
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						break;
					}
					
					
					case -1428735936:
					{
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						if (field.equals("writeEntryHeader")) 
						{
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "writeEntryHeader")) );
						}
						
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						break;
					}
					
					
					case -1865664112:
					{
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						if (field.equals("writeZipDate")) 
						{
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							return ((haxe.lang.Function) (new haxe.lang.Closure(this, "writeZipDate")) );
						}
						
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			if (__temp_executeDef1) 
			{
				//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, java.lang.Object[] dynargs)
	{
		//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		{
			//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			boolean __temp_executeDef1 = true;
			//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			if (( field != null )) 
			{
				//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				switch (field.hashCode())
				{
					case -1846498350:
					{
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						if (field.equals("writeCDR")) 
						{
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							this.writeCDR();
						}
						
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						break;
					}
					
					
					case -1865664112:
					{
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						if (field.equals("writeZipDate")) 
						{
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							this.writeZipDate(((haxe.root.Date) (dynargs[0]) ));
						}
						
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						break;
					}
					
					
					case 113399775:
					{
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						if (field.equals("write")) 
						{
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							this.write(((haxe.ds.List<java.lang.Object>) (dynargs[0]) ));
						}
						
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						break;
					}
					
					
					case -1428735936:
					{
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						if (field.equals("writeEntryHeader")) 
						{
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							__temp_executeDef1 = false;
							//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
							this.writeEntryHeader(dynargs[0]);
						}
						
						//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
						break;
					}
					
					
				}
				
			}
			
			//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
			if (__temp_executeDef1) 
			{
				//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		baseArr.push("files");
		//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		baseArr.push("o");
		//line 27 "/home/travis/haxe/std/haxe/zip/Writer.hx"
		super.__hx_getFields(baseArr);
	}
	
	
}


