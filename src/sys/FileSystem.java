// Generated by Haxe 4.0.5
package sys;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class FileSystem extends haxe.lang.HxObject
{
	public FileSystem(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public FileSystem()
	{
		//line 29 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
		sys.FileSystem.__hx_ctor_sys_FileSystem(this);
	}
	
	
	protected static void __hx_ctor_sys_FileSystem(sys.FileSystem __hx_this)
	{
	}
	
	
	public static boolean exists(java.lang.String path)
	{
		//line 31 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
		return new java.io.File(haxe.lang.Runtime.toString(path)).exists();
	}
	
	
	public static void rename(java.lang.String path, java.lang.String newPath)
	{
		//line 35 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
		if ( ! (new java.io.File(haxe.lang.Runtime.toString(path)).renameTo(((java.io.File) (new java.io.File(haxe.lang.Runtime.toString(newPath))) ))) ) 
		{
			//line 36 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
			throw haxe.lang.HaxeException.wrap(( ( ( "Cannot rename " + path ) + " to " ) + newPath ));
		}
		
	}
	
	
	public static java.lang.Object stat(java.lang.String path)
	{
		//line 41 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
		java.io.File f = new java.io.File(haxe.lang.Runtime.toString(path));
		//line 42 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
		if ( ! (f.exists()) ) 
		{
			//line 43 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
			throw haxe.lang.HaxeException.wrap(( ( "Path " + path ) + " doesn\'t exist" ));
		}
		
		//line 44 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
		{
			//line 47 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
			haxe.root.Date __temp_odecl1 = haxe.root.Date.now();
			//line 48 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
			haxe.root.Date __temp_odecl2 = haxe.root.Date.fromTime(((double) (f.lastModified()) ));
			//line 49 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
			haxe.root.Date __temp_odecl3 = haxe.root.Date.fromTime(((double) (f.lastModified()) ));
			//line 50 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
			int __temp_odecl4 = ((int) (f.length()) );
			//line 44 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
			return new haxe.lang.DynamicObject(new java.lang.String[]{"atime", "ctime", "mtime"}, new java.lang.Object[]{__temp_odecl1, __temp_odecl3, __temp_odecl2}, new java.lang.String[]{"dev", "gid", "ino", "mode", "nlink", "rdev", "size", "uid"}, new double[]{((double) (((double) (0) )) ), ((double) (((double) (0) )) ), ((double) (((double) (0) )) ), ((double) (((double) (0) )) ), ((double) (((double) (0) )) ), ((double) (((double) (0) )) ), ((double) (((double) (__temp_odecl4) )) ), ((double) (((double) (0) )) )});
		}
		
	}
	
	
	public static java.lang.String fullPath(java.lang.String relPath)
	{
		//line 61 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
		try 
		{
			//line 61 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
			return new java.io.File(haxe.lang.Runtime.toString(relPath)).getCanonicalPath();
		}
		catch (java.io.IOException e)
		{
			//line 63 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
			haxe.lang.Exceptions.setException(e);
			//line 63 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
			throw new java.lang.RuntimeException(((java.lang.Throwable) (e) ));
		}
		
		
	}
	
	
	public static java.lang.String absolutePath(java.lang.String relPath)
	{
		//line 68 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
		if (haxe.io.Path.isAbsolute(relPath)) 
		{
			//line 69 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
			return relPath;
		}
		
		//line 70 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
		return haxe.io.Path.join(new haxe.root.Array<java.lang.String>(new java.lang.String[]{haxe.root.Sys.getCwd(), relPath}));
	}
	
	
	public static boolean isDirectory(java.lang.String path)
	{
		//line 74 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
		java.io.File f = new java.io.File(haxe.lang.Runtime.toString(path));
		//line 75 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
		if ( ! (f.exists()) ) 
		{
			//line 76 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
			throw haxe.lang.HaxeException.wrap(( ( "Path " + path ) + " doesn\'t exist" ));
		}
		
		//line 77 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
		return f.isDirectory();
	}
	
	
	public static void createDirectory(java.lang.String path)
	{
		//line 81 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
		java.io.File f = new java.io.File(haxe.lang.Runtime.toString(path));
		//line 82 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
		if ((  ! (f.isDirectory())  &&  ! (f.mkdirs())  )) 
		{
			//line 83 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
			throw haxe.lang.HaxeException.wrap(( "Cannot create dir " + path ));
		}
		
	}
	
	
	public static void deleteFile(java.lang.String path)
	{
		//line 87 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
		if ( ! (new java.io.File(haxe.lang.Runtime.toString(path)).delete()) ) 
		{
			//line 88 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
			throw haxe.lang.HaxeException.wrap(( "Cannot delete file " + path ));
		}
		
	}
	
	
	public static void deleteDirectory(java.lang.String path)
	{
		//line 92 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
		if ( ! (new java.io.File(haxe.lang.Runtime.toString(path)).delete()) ) 
		{
			//line 93 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
			throw haxe.lang.HaxeException.wrap(( "Cannot delete directory " + path ));
		}
		
	}
	
	
	public static haxe.root.Array<java.lang.String> readDirectory(java.lang.String path)
	{
		//line 97 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
		java.io.File f = new java.io.File(haxe.lang.Runtime.toString(path));
		//line 98 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
		if ( ! (f.exists()) ) 
		{
			//line 99 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
			throw haxe.lang.HaxeException.wrap(( ( "Path " + path ) + " doesn\'t exist" ));
		}
		
		//line 100 "/home/travis/haxe/std/java/_std/sys/FileSystem.hx"
		return haxe.java.Lib.array_String(f.list());
	}
	
	
}


